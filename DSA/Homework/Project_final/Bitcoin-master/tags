!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APP_NAME	main.h	15;"	d
Array	bitcoin.h	/^struct Array$/;"	s
Attack	bitcoin.c	/^int Attack()$/;"	f
B	bitcoin.h	/^    Block B;$/;"	m	struct:Array
BLOCK_SIZE	bitcoin.c	9;"	d	file:
Bblack	color.c	/^void Bblack()$/;"	f
Bcyan	color.c	/^void Bcyan()$/;"	f
Block	bitcoin.h	/^typedef BlockChain *Block;$/;"	t
BlockArray	bitcoin.h	/^struct Array BlockArray;$/;"	v	typeref:struct:Array
BlockChain	bitcoin.h	/^struct BlockChain$/;"	s
BlockChain	bitcoin.h	/^typedef struct BlockChain BlockChain;$/;"	t	typeref:struct:BlockChain
ElemType	bitcoin.h	/^typedef int ElemType;$/;"	t
Hash	hash.c	/^ElemType Hash(Block B)$/;"	f
Hashkey	bitcoin.h	/^struct Hashkey{$/;"	s
MINE_AMOUNT	user.c	9;"	d	file:
NONCE_SIZE	bitcoin.c	8;"	d	file:
Nonce	bitcoin.h	/^    int Nonce;$/;"	m	struct:Array
Nonce	bitcoin.h	/^    int Nonce;$/;"	m	struct:BlockChain
PtrBlock	bitcoin.c	/^struct Array PtrBlock[51];$/;"	v	typeref:struct:Array
R_UID	bitcoin.h	/^    int R_UID;\/\/the reciever's user id$/;"	m	struct:Transaction
S_UID	bitcoin.h	/^    int S_UID;\/\/the sender's user id$/;"	m	struct:Transaction
T	bitcoin.h	/^    Transact T; \/\/we can also store the transaction history in an array$/;"	m	struct:UserList
T	bitcoin.h	/^    Transact T;$/;"	m	struct:BlockChain
Transact	bitcoin.h	/^typedef struct Transaction *Transact;$/;"	t	typeref:struct:Transaction
Transaction	bitcoin.h	/^struct Transaction$/;"	s
Transaction	bitcoin.h	/^typedef struct Transaction Transaction;$/;"	t	typeref:struct:Transaction
UID	bitcoin.h	/^    int UID;\/\/the randomly assigned user id$/;"	m	struct:UserList
UserList	bitcoin.h	/^struct UserList$/;"	s
UserList	bitcoin.h	/^typedef struct UserList UserList;$/;"	t	typeref:struct:UserList
Usernext	bitcoin.h	/^typedef UserList *Usernext;$/;"	t
Users	user.h	/^typedef Usernext Users;$/;"	t
Validate	bitcoin.c	/^bool Validate()$/;"	f
__BITCOIN_H	bitcoin.h	2;"	d
__COLOR_H	color.h	2;"	d
__MAIN_H	main.h	2;"	d
__TRANS_H__	trans.h	2;"	d
__UPDT_VAL_H__	update_val.h	2;"	d
__USER_H__	user.h	2;"	d
__abs	update_val.c	/^double __abs(double x)$/;"	f
__add_trans_in_usr	trans.c	/^Users __add_trans_in_usr(Users user, Transact transfer)$/;"	f
__adduser	user.c	/^Users __adduser(Users *user_list, Usernext user)$/;"	f
__check	user.c	/^int __check(Users *user_list, int id)$/;"	f
__find_id	user.c	/^int __find_id()$/;"	f
_time	bitcoin.h	/^typedef struct tm _time;$/;"	t	typeref:struct:tm
_time	user.h	/^typedef struct tm _time;$/;"	t	typeref:struct:tm
after_attack	update_val.c	/^double after_attack(double val)$/;"	f
attack	update_val.c	5;"	d	file:
balance	bitcoin.h	/^    double balance;$/;"	m	struct:UserList
black	color.c	/^void black()$/;"	f
block_num	bitcoin.h	/^    int block_num;$/;"	m	struct:BlockChain
blue	color.c	/^void blue()$/;"	f
coin_left	user.c	/^static double coin_left = 10000000000; \/\/fixed no of bitcoins$/;"	v	file:
command_length	main.h	16;"	d
createBlock	bitcoin.c	/^Block createBlock(Transact T, int block_num)$/;"	f
cyan	color.c	/^void cyan()$/;"	f
data	update_val.h	/^struct data$/;"	s
data	update_val.h	/^typedef struct data data;$/;"	t	typeref:struct:data
data_ptr	update_val.h	/^typedef data *data_ptr;$/;"	t
delete_user	user.c	/^double delete_user(Users *user_list, int id, double value)$/;"	f
digits	user.c	8;"	d	file:
double_user	user.c	/^void double_user(Users *user_list)$/;"	f
emptyBlock	bitcoin.c	/^Block emptyBlock(Transact T)$/;"	f
find_user	user.c	/^Users find_user(Users *user_list, int id)$/;"	f
green	color.c	/^void green()$/;"	f
hash_val	bitcoin.h	/^    ElemType hash_val;$/;"	m	struct:BlockChain
hashkey	hash.c	/^struct Hashkey hashkey;$/;"	v	typeref:struct:Hashkey
hashval	bitcoin.h	/^    int hashval;$/;"	m	struct:Hashkey
hashval_2	bitcoin.h	/^    int hashval_2;$/;"	m	struct:Hashkey
head	bitcoin.h	/^Block head;$/;"	v
initBlock	bitcoin.c	/^Block initBlock(int block_num, Transact T) \/\/will be called by initBlock during the update process of the blockchain->$/;"	f
initBlockArray	bitcoin.c	/^void initBlockArray()$/;"	f
init_val	update_val.h	4;"	d
join_time	bitcoin.h	/^    _time join_time;\/\/the time when the user joined$/;"	m	struct:UserList
main	main.c	/^int main()$/;"	f
mine	user.c	/^int mine(Users user)$/;"	f
new_trans	update_val.h	/^    int new_trans;$/;"	m	struct:data
new_usr	update_val.h	/^    int new_usr;$/;"	m	struct:data
next	bitcoin.h	/^    Block next;$/;"	m	struct:BlockChain
next	bitcoin.h	/^    Transact next;$/;"	m	struct:Transaction
old_trans	update_val.h	/^    int old_trans;$/;"	m	struct:data
old_usr	update_val.h	/^    int old_usr;$/;"	m	struct:data
prev	bitcoin.h	/^    Block prev;$/;"	m	struct:BlockChain
prev_block_hash	bitcoin.h	/^    ElemType prev_block_hash;$/;"	m	struct:BlockChain
printhelp	main.h	/^void printhelp()$/;"	f
red	color.c	/^void red()$/;"	f
register_usr	user.c	/^Users register_usr(Users *user_list, double init_val, double value)$/;"	f
reset	color.c	/^void reset()$/;"	f
tail	bitcoin.h	/^Block tail;$/;"	v
time	bitcoin.h	/^    _time time;\/\/the time at which the transaction took place$/;"	m	struct:Transaction
total_coins	update_val.h	3;"	d
tr_amount	bitcoin.h	/^    double tr_amount;\/\/the amount of transaction$/;"	m	struct:Transaction
trans_per_block	main.h	17;"	d
transfer	trans.c	/^Transact transfer(Users *sender, Users *reciver, double amt)$/;"	f
upd_val	update_val.c	/^double upd_val(data_ptr detail, double val)$/;"	f
updateBlockArray	bitcoin.c	/^void updateBlockArray(Block *Bl) \/\/pointer to pointer to blockchain$/;"	f
usr_no	user.h	/^unsigned int usr_no;$/;"	v
white	color.c	/^void white()$/;"	f
yellow	color.c	/^void yellow()$/;"	f
